#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <WebServer.h>
#include <Preferences.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>
#include "icon.h"
#include <Audio.h>

// üì∫ C·∫•u h√¨nh m√†n h√¨nh OLED
#define i2c_Address 0x3C // ƒê·ªãa ch·ªâ I2C c·ªßa m√†n h√¨nh OLED, th∆∞·ªùng l√† 0x3C cho c√°c m√†n OLED th√¥ng d·ª•ng
#define SCREEN_WIDTH 128 // Chi·ªÅu r·ªông m√†n h√¨nh OLED (pixel)
#define SCREEN_HEIGHT 64 // Chi·ªÅu cao m√†n h√¨nh OLED (pixel)
#define OLED_RESET -1    // Ch√¢n reset cho OLED (kh√¥ng d√πng trong QT-PY / XIAO)
#define OLED_SDA 21      // Ch√¢n SDA cho giao ti·∫øp I2C
#define OLED_SCL 22      // Ch√¢n SCL cho giao ti·∫øp I2C
Adafruit_SH1106G oled = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); // ƒê·ªëi t∆∞·ª£ng m√†n h√¨nh OLED
#define WHITE 1          // M√†u tr·∫Øng cho OLED
#define BLACK 0          // M√†u ƒëen cho OLED
#define NUMFLAKES 10     // S·ªë b√¥ng tuy·∫øt cho hi·ªáu ·ª©ng ho·∫°t h√¨nh (ch∆∞a s·ª≠ d·ª•ng trong m√£)
#define XPOS 0           // Ch·ªâ s·ªë v·ªã tr√≠ X cho ho·∫°t h√¨nh
#define YPOS 1           // Ch·ªâ s·ªë v·ªã tr√≠ Y cho ho·∫°t h√¨nh
#define DELTAY 2         // ƒê·ªô l·ªách Y cho ho·∫°t h√¨nh

// üìã C√°c tr·∫°ng th√°i m√†n h√¨nh
typedef enum {
  SCREEN0,  // M√†n h√¨nh kh·ªüi ƒë·ªông
  SCREEN1,  // M√†n h√¨nh hi·ªÉn th·ªã s·ªë ti·ªÅn giao d·ªãch
  SCREEN2,  // (Ch∆∞a s·ª≠ d·ª•ng)
  SCREEN3,  // (Ch∆∞a s·ª≠ d·ª•ng)
  SCREEN4,  // (Ch∆∞a s·ª≠ d·ª•ng)
  SCREEN5,  // M√†n h√¨nh WiFi m·∫•t k·∫øt n·ªëi
  SCREEN6,  // (Ch∆∞a s·ª≠ d·ª•ng)
  SCREEN7,  // (Ch∆∞a s·ª≠ d·ª•ng)
  SCREEN8,  // (Ch∆∞a s·ª≠ d·ª•ng)
  SCREEN9,  // M√†n h√¨nh c·∫•u h√¨nh WiFi (AP mode)
  SCREEN10, // (Ch∆∞a s·ª≠ d·ª•ng)
  SCREEN11, // (Ch∆∞a s·ª≠ d·ª•ng)
  SCREEN12, // (Ch∆∞a s·ª≠ d·ª•ng)
  SCREEN13  // M√†n h√¨nh kh·ªüi ƒë·ªông l·∫°i
} SCREEN;

// üîÑ Bi·∫øn qu·∫£n l√Ω tr·∫°ng th√°i m√†n h√¨nh
#define ENABLE    1
#define DISABLE   0
int screenOLED = SCREEN0; // Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa m√†n h√¨nh OLED
int countSCREEN9 = 0;     // B·ªô ƒë·∫øm cho m√†n h√¨nh SCREEN9 (ch∆∞a s·ª≠ d·ª•ng trong m√£)
bool enableShow = DISABLE; // K√≠ch ho·∫°t hi·ªÉn th·ªã tr√™n OLED (ENABLE/DISABLE)
int Volume = 30;          // M·ª©c √¢m l∆∞·ª£ng cho module √¢m thanh

// üîä C·∫•u h√¨nh I2S cho √¢m thanh
#define I2S_DOUT 25 // Ch√¢n d·ªØ li·ªáu ƒë·∫ßu ra I2S
#define I2S_BCLK 27 // Ch√¢n clock bit I2S
#define I2S_LRC 26  // Ch√¢n ch·ªçn k√™nh tr√°i/ph·∫£i I2S
Audio audio;        // ƒê·ªëi t∆∞·ª£ng ƒëi·ªÅu khi·ªÉn √¢m thanh
bool isPlaying = false; // Tr·∫°ng th√°i ph√°t √¢m thanh (true: ƒëang ph√°t, false: kh√¥ng ph√°t)

// üì£ C·∫•u h√¨nh c√≤i (buzzer)
#define BUZZER 4         // Ch√¢n ƒëi·ªÅu khi·ªÉn c√≤i
#define BUZZER_ON 0      // Tr·∫°ng th√°i b·∫≠t c√≤i
#define BUZZER_OFF 1     // Tr·∫°ng th√°i t·∫Øt c√≤i

// üåê C·∫•u h√¨nh Web Config
#define BUTTON_PIN 0        // Ch√¢n n√∫t BOOT (GPIO0)
#define BOOT_HOLD_TIME 1500 // Th·ªùi gian gi·ªØ n√∫t BOOT ƒë·ªÉ v√†o ch·∫ø ƒë·ªô c·∫•u h√¨nh (ms)
#define AP_SSID "ESP32 Tingbox" // T√™n WiFi AP khi ESP32 ·ªü ch·∫ø ƒë·ªô ƒëi·ªÉm truy c·∫≠p
#define AP_PASS ""          // M·∫≠t kh·∫©u WiFi AP (r·ªóng = kh√¥ng m·∫≠t kh·∫©u)
WebServer server(80);       // M√°y ch·ªß web ch·∫°y tr√™n c·ªïng 80
Preferences prefs;          // ƒê·ªëi t∆∞·ª£ng l∆∞u tr·ªØ c·∫•u h√¨nh trong b·ªô nh·ªõ kh√¥ng x√≥a

// üì° Bi·∫øn l∆∞u tr·ªØ c·∫•u h√¨nh WiFi v√† Google Script
String wifi_ssid, wifi_pass, script_code; // SSID, m·∫≠t kh·∫©u WiFi v√† m√£ Google Script
String url_ting_ting = "https://tiengdong.com/wp-content/uploads/Tieng-tinh-tinh-www_tiengdong_com.mp3"; // URL √¢m thanh "ting ting"

// üìä C·∫•u h√¨nh Google Sheet
String oldMaThamChieu = ""; // L∆∞u m√£ tham chi·∫øu giao d·ªãch m·ªõi nh·∫•t
bool isFirstFetch = true;   // C·ªù ƒë√°nh d·∫•u l·∫ßn ƒë·∫ßu l·∫•y d·ªØ li·ªáu t·ª´ Google Sheet

// üßæ C·∫•u tr√∫c d·ªØ li·ªáu giao d·ªãch
struct Transaction {
  String nganHang;          // T√™n ng√¢n h√†ng
  String ngayGiaoDich;      // Ng√†y giao d·ªãch
  String soTaiKhoan;        // S·ªë t√†i kho·∫£n
  String taiKhoanPhu;       // T√†i kho·∫£n ph·ª•
  String codeTT;            // M√£ thanh to√°n
  String noiDungThanhToan;  // N·ªôi dung thanh to√°n
  String loai;              // Lo·∫°i giao d·ªãch
  String maThamChieu;       // M√£ tham chi·∫øu
  int soTien;               // S·ªë ti·ªÅn giao d·ªãch
  int luyKe;                // T·ªïng l≈©y k·∫ø
};
Transaction t; // Bi·∫øn l∆∞u th√¥ng tin giao d·ªãch hi·ªán t·∫°i

// üìà Tr·∫°ng th√°i d·ªØ li·ªáu
#define DATAOK 2   // D·ªØ li·ªáu l·∫•y th√†nh c√¥ng
#define DATAERR 0  // L·ªói khi l·∫•y d·ªØ li·ªáu
#define WIFI_DIS 1 // WiFi m·∫•t k·∫øt n·ªëi
int countTaskReadSepay = 0; // B·ªô ƒë·∫øm cho t√°c v·ª• ƒë·ªçc d·ªØ li·ªáu t·ª´ Sepay
bool enableReadSepay = 0;   // K√≠ch ho·∫°t ƒë·ªçc d·ªØ li·ªáu t·ª´ Sepay
uint8_t trigAudio = 1;      // C·ªù k√≠ch ho·∫°t √¢m thanh (0: kh√¥ng ph√°t, 1: ph√°t "ting ting", 2: ph√°t th√¥ng b√°o)
int checkGetData = DATAERR; // Tr·∫°ng th√°i l·∫•y d·ªØ li·ªáu (DATAOK, DATAERR, WIFI_DIS)
int isStart = 0;            // C·ªù ƒë√°nh d·∫•u l·∫ßn ƒë·∫ßu ch·∫°y ch∆∞∆°ng tr√¨nh
int tienNhan[3] = {0, 0, 0}; // M·∫£ng l∆∞u 3 s·ªë ti·ªÅn giao d·ªãch g·∫ßn nh·∫•t

/**
 * üõ†Ô∏è H√†m kh·ªüi t·∫°o thi·∫øt b·ªã
 * Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn ph·∫ßn c·ª©ng v√† k·∫øt n·ªëi WiFi.
 */
void setup() {
  Serial.begin(115200); // Kh·ªüi t·∫°o giao ti·∫øp Serial v·ªõi t·ªëc ƒë·ªô 115200 baud
  loadConfig();        // T·∫£i c·∫•u h√¨nh WiFi v√† Google Script t·ª´ b·ªô nh·ªõ
  printPrefs();        // In c·∫•u h√¨nh ƒë√£ l∆∞u ra Serial

  // üì£ Kh·ªüi t·∫°o c√≤i
  pinMode(BUZZER, OUTPUT);        // C·∫•u h√¨nh ch√¢n c√≤i l√† ƒë·∫ßu ra
  digitalWrite(BUZZER, BUZZER_OFF); // T·∫Øt c√≤i ban ƒë·∫ßu

  // üñ≤Ô∏è Kh·ªüi t·∫°o n√∫t nh·∫•n
  pinMode(BUTTON_PIN, INPUT_PULLUP); // C·∫•u h√¨nh ch√¢n n√∫t BOOT v·ªõi ƒëi·ªán tr·ªü k√©o l√™n

  // üì∫ Kh·ªüi t·∫°o m√†n h√¨nh OLED
  oled.begin(i2c_Address, true); // Kh·ªüi ƒë·ªông OLED v·ªõi ƒë·ªãa ch·ªâ I2C
  oled.setTextSize(2);          // ƒê·∫∑t k√≠ch th∆∞·ªõc ch·ªØ l√† 2
  oled.setTextColor(SH110X_WHITE); // ƒê·∫∑t m√†u ch·ªØ l√† tr·∫Øng
  for (int j = 0; j < 3; j++) { // Hi·ªÉn th·ªã animation kh·ªüi ƒë·ªông
    for (int i = 0; i < FRAME_COUNT_loadingOLED; i++) {
      oled.clearDisplay(); // X√≥a m√†n h√¨nh
      oled.drawBitmap(32, 0, loadingOLED[i], FRAME_WIDTH_64, FRAME_HEIGHT_64, 1); // V·∫Ω frame animation
      oled.display();     // C·∫≠p nh·∫≠t hi·ªÉn th·ªã
      delay(FRAME_DELAY / 4); // ƒê·ª£i gi·ªØa c√°c frame
    }
  }

  // üîä Kh·ªüi t·∫°o module √¢m thanh
  audio.setPinout(I2S_BCLK, I2S_LRC, I2S_DOUT); // C·∫•u h√¨nh ch√¢n I2S
  audio.setVolume(Volume);                      // ƒê·∫∑t m·ª©c √¢m l∆∞·ª£ng

  connectSTA(); // K·∫øt n·ªëi WiFi ·ªü ch·∫ø ƒë·ªô Station
}

/**
 * üîÑ V√≤ng l·∫∑p ch√≠nh
 * X·ª≠ l√Ω c√°c s·ª± ki·ªán: nh·∫•n n√∫t, ƒë·ªçc d·ªØ li·ªáu t·ª´ Google Sheet, ph√°t √¢m thanh, hi·ªÉn th·ªã tr√™n OLED.
 */
void loop() {
  // üñ≤Ô∏è Ki·ªÉm tra nh·∫•n n√∫t BOOT ƒë·ªÉ v√†o ch·∫ø ƒë·ªô c·∫•u h√¨nh
  static unsigned long bootPressStart = 0; // Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu nh·∫•n n√∫t
  static bool isBootHeld = false;          // Tr·∫°ng th√°i gi·ªØ n√∫t
  if (digitalRead(BUTTON_PIN) == LOW) {
    if (!isBootHeld) {
      isBootHeld = true;
      bootPressStart = millis();
    } else if (millis() - bootPressStart > BOOT_HOLD_TIME) {
      Serial.println("ƒê√£ gi·ªØ n√∫t BOOT 3 gi√¢y. V√†o c·∫•u h√¨nh!"); // Th√¥ng b√°o v√†o ch·∫ø ƒë·ªô c·∫•u h√¨nh
      buzzerBeep(3); // Ph√°t 3 ti·∫øng c√≤i

      // Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh tr√™n OLED
      oled.clearDisplay();
      oled.setTextSize(1);
      oled.setCursor(40, 5);
      oled.print("Ket noi Wifi:");
      oled.setCursor(40, 17);
      oled.print("TingBox");
      oled.setCursor(40, 38);
      oled.print("Dia chi IP:");
      oled.setCursor(40, 50);
      oled.print("192.168.4.1");
      clearRectangle(0, 0, 32, 64); // X√≥a v√πng hi·ªÉn th·ªã
      oled.drawBitmap(0, 16, settingOLED[0], FRAME_WIDTH_32, FRAME_HEIGHT_32, 1); // V·∫Ω icon c√†i ƒë·∫∑t
      oled.display();
      delay(FRAME_DELAY * 4);

      enterConfigAPMode(); // Chuy·ªÉn sang ch·∫ø ƒë·ªô AP
    }
  } else {
    isBootHeld = false;
    bootPressStart = 0;
  }

  // üìä Ki·ªÉm tra v√† ƒë·ªçc d·ªØ li·ªáu t·ª´ Google Sheet
  countTaskReadSepay++;
  if (trigAudio == 0 && countTaskReadSepay >= 6 && enableReadSepay == 1) {
    countTaskReadSepay = 0;
    if (WiFi.status() == WL_CONNECTED) {
      String url = "https://script.google.com/macros/s/" + script_code + "/exec?sts=read"; // URL ƒë·ªçc d·ªØ li·ªáu
      HTTPClient http;
      http.begin(url);
      http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);

      int httpCode = http.GET();
      if (httpCode == HTTP_CODE_OK) {
        checkGetData = DATAOK;
        String payload = http.getString();
        Serial.println(payload);
        const size_t capacity = JSON_ARRAY_SIZE(3) + 3 * JSON_ARRAY_SIZE(10) + 500; // Dung l∆∞·ª£ng JSON
        DynamicJsonDocument doc(capacity);
        auto error = deserializeJson(doc, payload);

        if (!error) {
          int size = doc.size();
          if (isFirstFetch) { // L·∫ßn ƒë·∫ßu l·∫•y d·ªØ li·ªáu
            for (int i = 0; i < size; i++) {
              Serial.print("Row "); Serial.print(i); Serial.print(": ");
              Serial.println(doc[i][8].as<String>());
            }
            if (size > 0) {
              oldMaThamChieu = doc[size - 1][8].as<String>(); // L·∫•y m√£ tham chi·∫øu m·ªõi nh·∫•t
              Serial.println("[L·∫ßn ƒë·∫ßu kh·ªüi ƒë·ªông] G√°n oldMaThamChieu = " + oldMaThamChieu);
              tienNhan[0] = doc[0][7].as<int>();
              tienNhan[1] = doc[1][7].as<int>();
              tienNhan[2] = doc[2][7].as<int>();
            }
            isFirstFetch = false;
          } else { // C√°c l·∫ßn sau
            tienNhan[0] = doc[0][7].as<int>();
            tienNhan[1] = doc[1][7].as<int>();
            tienNhan[2] = doc[2][7].as<int>();
            int viTriOld = -1;
            for (int i = 0; i < size; i++) {
              if (doc[i][8].as<String>() == oldMaThamChieu) {
                viTriOld = i;
                break;
              }
            }

            bool foundNew = false;
            if (viTriOld >= 0 && viTriOld < (size - 1)) { // C√≥ giao d·ªãch m·ªõi
              int idxMoiNhat = viTriOld + 1;
              JsonArray row = doc[idxMoiNhat].as<JsonArray>();
              t.nganHang = row[0].as<String>();
              t.ngayGiaoDich = row[1].as<String>();
              t.soTaiKhoan = row[2].as<String>();
              t.taiKhoanPhu = row[3].as<String>();
              t.codeTT = row[4].as<String>();
              t.noiDungThanhToan = row[5].as<String>();
              t.loai = row[6].as<String>();
              t.soTien = row[7].as<int>();
              t.maThamChieu = row[8].as<String>();
              t.luyKe = row[9].as<int>();

              Serial.println("\n=== Giao d·ªãch m·ªõi ph√°t hi·ªán ===");
              Serial.println("Ng√¢n h√†ng: " + t.nganHang);
              Serial.println("Ng√†y giao d·ªãch: " + t.ngayGiaoDich);
              Serial.println("S·ªë t√†i kho·∫£n: " + t.soTaiKhoan);
              Serial.println("T√†i kho·∫£n ph·ª•: " + t.taiKhoanPhu);
              Serial.println("Code TT: " + t.codeTT);
              Serial.println("N·ªôi dung thanh to√°n: " + t.noiDungThanhToan);
              Serial.println("Lo·∫°i: " + t.loai);
              Serial.println("S·ªë ti·ªÅn: " + String(t.soTien));
              Serial.println("M√£ tham chi·∫øu: " + t.maThamChieu);
              Serial.println("L≈©y k·∫ø: " + String(t.luyKe));
              Serial.println("==============================");
              trigAudio = 1;
              oldMaThamChieu = t.maThamChieu;
              foundNew = true;
            } else if (viTriOld == -1 && size > 0) { // Kh√¥ng t√¨m th·∫•y m√£ c≈©
              JsonArray row = doc[0].as<JsonArray>();
              t.nganHang = row[0].as<String>();
              t.ngayGiaoDich = row[1].as<String>();
              t.soTaiKhoan = row[2].as<String>();
              t.taiKhoanPhu = row[3].as<String>();
              t.codeTT = row[4].as<String>();
              t.noiDungThanhToan = row[5].as<String>();
              t.loai = row[6].as<String>();
              t.soTien = row[7].as<int>();
              t.maThamChieu = row[8].as<String>();
              t.luyKe = row[9].as<int>();

              Serial.println("\n=== Giao d·ªãch m·ªõi ph√°t hi·ªán (All new ho·∫∑c reset m·ªëc) ===");
              Serial.println("Ng√¢n h√†ng: " + t.nganHang);
              Serial.println("Ng√†y giao d·ªãch: " + t.ngayGiaoDich);
              Serial.println("S·ªë t√†i kho·∫£n: " + t.soTaiKhoan);
              Serial.println("T√†i kho·∫£n ph·ª•: " + t.taiKhoanPhu);
              Serial.println("Code TT: " + t.codeTT);
              Serial.println("N·ªôi dung thanh to√°n: " + t.noiDungThanhToan);
              Serial.println("Lo·∫°i: " + t.loai);
              Serial.println("S·ªë ti·ªÅn: " + String(t.soTien));
              Serial.println("M√£ tham chi·∫øu: " + t.maThamChieu);
              Serial.println("L≈©y k·∫ø: " + String(t.luyKe));
              Serial.println("==============================");
              trigAudio = 1;
              oldMaThamChieu = t.maThamChieu;
              foundNew = true;
            }
            if (!foundNew) Serial.println("Kh√¥ng c√≥ giao d·ªãch m·ªõi.");
          }
        } else {
          Serial.print("JSON deserialization failed: ");
          Serial.println(error.c_str());
        }
      } else {
        checkGetData = DATAERR;
        Serial.println("L·∫•y d·ªØ li·ªáu th·∫•t b·∫°i ho·∫∑c m√£ l·ªói HTTP.");
      }
      http.end();
    } else {
      checkGetData = WIFI_DIS;
      Serial.println("WiFi ch∆∞a k·∫øt n·ªëi, ƒëang th·ª≠ l·∫°i...");
    }
  }

  // üîä Ph√°t √¢m thanh khi c√≥ giao d·ªãch m·ªõi
  if (!isPlaying && trigAudio == 1) {
    Serial.println("Playing audio...");
    isPlaying = 1;
    enableShow = DISABLE;
    audio.connecttohost(url_ting_ting.c_str()); // Ph√°t √¢m thanh "ting ting"
    audio.loop();
  }
  if (isPlaying) {
    if (audio.isRunning() && trigAudio > 0) {
      audio.loop();
    } else {
      if (trigAudio == 1) {
        Serial.println("Audio finished 1");
        trigAudio = 2;
        String message = "";
        if (isStart == 0) {
          message = "Xin ch√†o";
          isStart = 1;
        } else {
          message = "Thanh to√°n th√†nh c√¥ng " + String(t.soTien) + " ƒë·ªìng";
        }
        const char* messageChar = message.c_str();
        audio.connecttospeech(messageChar, "vi"); // Ph√°t th√¥ng b√°o b·∫±ng ti·∫øng Vi·ªát
      } else if (trigAudio == 2) {
        isPlaying = 0;
        trigAudio = 0;
        enableShow = ENABLE;
        Serial.println("Audio finished 2");
      }
    }
  }

  // üì∫ Hi·ªÉn th·ªã tr√™n OLED theo tr·∫°ng th√°i
  switch (screenOLED) {
    case SCREEN1: // Hi·ªÉn th·ªã 3 s·ªë ti·ªÅn giao d·ªãch g·∫ßn nh·∫•t
      for (int i = 0; i < FRAME_COUNT_Money && enableShow == ENABLE; i++) {
        oled.clearDisplay();
        oled.setTextSize(1.5);
        oled.setCursor(60, 5);
        oled.print(String(tienNhan[0]) + " vnd");
        oled.setCursor(60, 25);
        oled.print(String(tienNhan[1]) + " vnd");
        oled.setCursor(60, 45);
        oled.print(String(tienNhan[2]) + " vnd");
        clearRectangle(0, 0, 32, 64);
        oled.drawBitmap(16, 16, moneyOLED[i], FRAME_WIDTH_32, FRAME_HEIGHT_32, 1); // V·∫Ω icon ti·ªÅn
        if (checkGetData == DATAOK) {
          drawLeftCornerTriangles(WHITE); // V·∫Ω d·∫•u hi·ªáu k·∫øt n·ªëi th√†nh c√¥ng
        } else if (checkGetData == WIFI_DIS) {
          drawTriangleBottomLeft(WHITE); // V·∫Ω d·∫•u hi·ªáu m·∫•t k·∫øt n·ªëi
        }
        oled.display();
        delay(FRAME_DELAY);
      }
      oled.display();
      break;
    case SCREEN5: // M√†n h√¨nh m·∫•t k·∫øt n·ªëi WiFi
      oled.clearDisplay();
      oled.setTextSize(1);
      oled.setCursor(40, 5);
      oled.print("WIFI");
      oled.setTextSize(1.5);
      oled.setCursor(40, 17);
      oled.print("Mat ket noi.");
      oled.drawBitmap(0, 0, wifiOLED[FRAME_COUNT_wifiOLED - 1], FRAME_WIDTH_32, FRAME_HEIGHT_32, 1);
      oled.drawLine(31, 0, 0, 31, 1);
      oled.drawLine(32, 0, 0, 32, 1);
      oled.display();
      delay(2000);
      screenOLED = SCREEN9;
      break;
    case SCREEN9: // M√†n h√¨nh c·∫•u h√¨nh AP
      oled.clearDisplay();
      oled.setTextSize(1);
      oled.setCursor(40, 5);
      oled.print("Ket noi Wifi:");
      oled.setCursor(40, 17);
      oled.print("TingBox");
      oled.setCursor(40, 38);
      oled.print("Dia chi IP:");
      oled.setCursor(40, 50);
      oled.print("192.168.4.1");
      for (int i = 0; i < FRAME_COUNT_settingOLED; i++) {
        clearRectangle(0, 0, 32, 64);
        oled.drawBitmap(0, 16, settingOLED[i], FRAME_WIDTH_32, FRAME_HEIGHT_32, 1);
        oled.display();
        delay(FRAME_DELAY * 4);
      }
      if (WiFi.status() == WL_CONNECTED) {
        screenOLED = SCREEN1;
      }
      break;
    case SCREEN13: // M√†n h√¨nh kh·ªüi ƒë·ªông l·∫°i
      oled.clearDisplay();
      oled.setTextSize(1);
      oled.setCursor(0, 20);
      oled.print("Khoi dong lai");
      oled.setCursor(0, 32);
      oled.print("Vui long doi ...");
      oled.display();
      break;
    default:
      delay(10);
      break;
  }
}

/**
 * üì° K·∫øt n·ªëi WiFi ·ªü ch·∫ø ƒë·ªô Station
 * Th·ª≠ k·∫øt n·ªëi v·ªõi WiFi s·ª≠ d·ª•ng SSID v√† m·∫≠t kh·∫©u ƒë√£ l∆∞u. N·∫øu th·∫•t b·∫°i, chuy·ªÉn sang ch·∫ø ƒë·ªô AP.
 */
void connectSTA() {
  delay(5000);
  enableShow = DISABLE;
  if (wifi_ssid.length() > 1) {
    Serial.println(wifi_ssid);
    Serial.println(wifi_pass);
    WiFi.begin(wifi_ssid.c_str(), wifi_pass.c_str());
    int countConnect = 0;
    while (WiFi.status() != WL_CONNECTED) {
      oled.clearDisplay();
      oled.setTextSize(1);
      oled.setCursor(40, 5);
      oled.print("WIFI");
      oled.setTextSize(1.5);
      oled.setCursor(40, 17);
      oled.print("Dang ket noi..");
      for (int i = 0; i < FRAME_COUNT_wifiOLED; i++) {
        clearRectangle(0, 0, 32, 32);
        oled.drawBitmap(0, 0, wifiOLED[i], FRAME_WIDTH_32, FRAME_HEIGHT_32, 1);
        oled.display();
        delay(FRAME_DELAY);
      }
      countConnect++;
      if (countConnect >= 15) {
        Serial.println("Ket noi Wifi that bai");
        Serial.println("Kiem tra SSID & PASS");
        Serial.println("Ket noi Wifi: ESP32 de cau hinh");
        Serial.println("IP: 192.168.4.1");
        oled.clearDisplay();
        oled.setTextSize(1);
        oled.setCursor(40, 5);
        oled.print("Ket noi Wifi:");
        oled.setCursor(40, 17);
        oled.print("ESP32 Tingbox");
        oled.setCursor(40, 38);
        oled.print("Dia chi IP:");
        oled.setCursor(40, 50);
        oled.print("192.168.4.1");
        clearRectangle(0, 0, 32, 64); // X√≥a v√πng hi·ªÉn th·ªã
        oled.drawBitmap(0, 16, settingOLED[0], FRAME_WIDTH_32, FRAME_HEIGHT_32, 1); // V·∫Ω icon c√†i ƒë·∫∑t
        oled.display();
        digitalWrite(BUZZER, BUZZER_ON);
        delay(2000);
        digitalWrite(BUZZER, BUZZER_OFF);
        enterConfigAPMode();
        break;
      }
    }
    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("Da ket noi Wifi: ");
      Serial.println("IP address: ");
      Serial.println(WiFi.localIP());
      Serial.println((char*)wifi_ssid.c_str());
      buzzerBeep(3);
      Serial.println("Tr·∫°ng th√°i WiFi: " + String(WiFi.status()));
      Serial.println("ƒê·ªãa ch·ªâ IP: " + WiFi.localIP().toString());
      oled.clearDisplay();
      oled.setTextSize(1);
      oled.setCursor(40, 5);
      oled.print("WIFI");
      oled.setTextSize(1.5);
      oled.setCursor(40, 17);
      oled.print("Da ket noi.");
      oled.drawBitmap(0, 0, wifiOLED[FRAME_COUNT_wifiOLED - 1], FRAME_WIDTH_32, FRAME_HEIGHT_32, 1);
      delay(3000);
      enableReadSepay = 1;
      screenOLED = SCREEN1;
      enableShow = ENABLE;
    }
  }
}

/**
 * üåê Chuy·ªÉn ESP32 sang ch·∫ø ƒë·ªô Access Point
 * T·∫°o ƒëi·ªÉm truy c·∫≠p WiFi v√† kh·ªüi ƒë·ªông m√°y ch·ªß web ƒë·ªÉ c·∫•u h√¨nh.
 */
void enterConfigAPMode() {
  Serial.println("==> V√†o ch·∫ø ƒë·ªô c·∫•u h√¨nh WiFi qua AP <==");
  WiFi.disconnect(true);
  delay(500);
  WiFi.mode(WIFI_AP);
  WiFi.softAP(AP_SSID, AP_PASS);
  Serial.print("ESP AP IP: "); Serial.println(WiFi.softAPIP());
  setupWebServer();
  while (true) {
    server.handleClient();
    delay(2);
  }
}

/**
 * üìÑ T·∫°o trang HTML cho giao di·ªán c·∫•u h√¨nh
 * @return Chu·ªói HTML c·ªßa trang web c·∫•u h√¨nh
 */
String htmlPage() {
  String page = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
<meta charset='UTF-8' />
<title>C·∫•u h√¨nh ESP32 Tingbox</title>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<style>
body{background:#222;font-family:sans-serif;color:#fff;text-align:center;}
h2{color:#4CAF50;}
form{background:#333;border-radius:10px;display:inline-block;padding:30px 40px;margin-top:50px;box-shadow:0 4px 16px #0008}
input[type=text],input[type=password]{width:250px;padding:10px;margin:10px 0;border:none;border-radius:5px;}
button{
  background:linear-gradient(90deg,#00c6ff,#0072ff);
  color:#fff;padding:10px 60px;border:none;border-radius:6px;cursor:pointer;font-size:1.2em;margin-top:15px;
}
button:hover{background:#4CAF50;}
label{float:left;font-weight:bold}
.form-group{margin-bottom: 18px;text-align:left;}
.alert{background:#2ecc40;color:#fff;border-radius:5px;padding:12px 18px;display:none;margin-top:18px}
</style>
</head>
<body>
<h2>C·∫§U H√åNH ESP32 Tingbox</h2>
<form id='configForm' onsubmit='return submitForm();'>
  <div class='form-group'>
    <label>WiFi SSID:</label><br>
    <input name='ssid' type='text' id='ssid' required>
  </div>
  <div class='form-group'>
    <label>WiFi Password:</label><br>
    <input name='pass' type='text' id='pass' required>
  </div>
  <div class='form-group'>
    <label>M√£ Script Google Sheet:</label><br>
    <input name='script' type='text' id='script' required>
  </div>
  <button type='submit'>C√†i ƒë·∫∑t</button>
  <div class='alert' id='alertMessage'></div>
</form>
<script>
window.onload = function(){
  fetch('/getcfg').then(r=>r.json()).then(cfg=>{
    document.getElementById('ssid').value=cfg.ssid;
    document.getElementById('pass').value=cfg.pass;
    document.getElementById('script').value=cfg.script;
  });
}
function submitForm() {
  let ssid = document.getElementById('ssid').value,
      pass = document.getElementById('pass').value,
      script = document.getElementById('script').value;
  fetch('/savecfg', {
    method: 'POST',
    headers: {'Content-Type':'application/x-www-form-urlencoded'},
    body: `ssid=${encodeURIComponent(ssid)}&pass=${encodeURIComponent(pass)}&script=${encodeURIComponent(script)}`
  }).then(resp=>resp.text()).then(msg => {
    alert("C√†i ƒë·∫∑t th√†nh c√¥ng");
    //setTimeout(()=>{location.reload()}, 2000);
  });
  return false;
}
</script>
</body>
</html>
)rawliteral";
  return page;
}

/**
 * üåê X·ª≠ l√Ω y√™u c·∫ßu GET cho trang ch·ªß
 * G·ª≠i trang HTML c·∫•u h√¨nh v·ªÅ client
 */
void handleRoot() {
  server.send(200, "text/html", htmlPage());
}

/**
 * üì° L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i
 * G·ª≠i c·∫•u h√¨nh WiFi v√† Google Script d∆∞·ªõi d·∫°ng JSON
 */
void handleGetCfg() {
  String json = "{\"ssid\":\"" + wifi_ssid + "\",\"pass\":\"" + wifi_pass + "\",\"script\":\"" + script_code + "\"}";
  server.send(200, "application/json", json);
}

/**
 * üíæ L∆∞u c·∫•u h√¨nh m·ªõi
 * L∆∞u SSID, m·∫≠t kh·∫©u v√† m√£ Google Script, sau ƒë√≥ kh·ªüi ƒë·ªông l·∫°i ESP32
 */
void handleSaveCfg() {
  String ssid = server.arg("ssid");
  String pass = server.arg("pass");
  String script = server.arg("script");
  saveConfig(ssid, pass, script);
  wifi_ssid = ssid;
  wifi_pass = pass;
  script_code = script;
  server.send(200, "text/plain", "&#9989; ƒê√£ l∆∞u c·∫•u h√¨nh, ESP32 s·∫Ω kh·ªüi ƒë·ªông l·∫°i...");
  enableShow = DISABLE;
  screenOLED = SCREEN13;
  delay(5000);
  ESP.restart();
}

/**
 * üåê Thi·∫øt l·∫≠p m√°y ch·ªß web
 * ƒêƒÉng k√Ω c√°c tuy·∫øn x·ª≠ l√Ω y√™u c·∫ßu HTTP
 */
void setupWebServer() {
  server.on("/", HTTP_GET, handleRoot);
  server.on("/getcfg", HTTP_GET, handleGetCfg);
  server.on("/savecfg", HTTP_POST, handleSaveCfg);
  server.begin();
}

/**
 * üñ®Ô∏è In c·∫•u h√¨nh l∆∞u tr·ªØ
 * Hi·ªÉn th·ªã SSID, m·∫≠t kh·∫©u v√† m√£ Google Script ra Serial
 */
void printPrefs() {
  Serial.println("----- Th√¥ng tin prefs ESP32 -----");
  Serial.println("SSID    : " + wifi_ssid);
  Serial.println("PASS    : " + wifi_pass);
  Serial.println("SCRIPT  : " + script_code);
  Serial.println("---------------------------------");
}

/**
 * üíæ T·∫£i c·∫•u h√¨nh t·ª´ b·ªô nh·ªõ
 * ƒê·ªçc SSID, m·∫≠t kh·∫©u v√† m√£ Google Script t·ª´ b·ªô nh·ªõ kh√¥ng x√≥a
 */
void loadConfig() {
  prefs.begin("config", true);
  wifi_ssid = prefs.getString("ssid", "wifi_config");
  wifi_pass = prefs.getString("pass", "12345678");
  script_code = prefs.getString("script", "");

  prefs.end();
}

/**
 * üíæ L∆∞u c·∫•u h√¨nh v√†o b·ªô nh·ªõ
 * @param ssid SSID WiFi
 * @param pass M·∫≠t kh·∫©u WiFi
 * @param script M√£ Google Script
 */
void saveConfig(const String& ssid, const String& pass, const String& script) {
  prefs.begin("config", false);
  prefs.putString("ssid", ssid);
  prefs.putString("pass", pass);
  prefs.putString("script", script);
  prefs.end();
}

/**
 * üñåÔ∏è X√≥a v√πng h√¨nh ch·ªØ nh·∫≠t tr√™n OLED
 * @param x1 T·ªça ƒë·ªô X b·∫Øt ƒë·∫ßu
 * @param y1 T·ªça ƒë·ªô Y b·∫Øt ƒë·∫ßu
 * @param x2 T·ªça ƒë·ªô X k·∫øt th√∫c
 * @param y2 T·ªça ƒë·ªô Y k·∫øt th√∫c
 */
void clearRectangle(int x1, int y1, int x2, int y2) {
  for (int i = y1; i < y2; i++) {
    oled.drawLine(x1, i, x2, i, 0);
  }
}

/**
 * üñåÔ∏è X√≥a to√†n b·ªô m√†n h√¨nh OLED
 */
void clearOLED() {
  oled.clearDisplay();
  oled.display();
}

/**
 * üñåÔ∏è V·∫Ω tam gi√°c g√≥c d∆∞·ªõi tr√°i tr√™n OLED
 * @param color M√†u tam gi√°c (WHITE ho·∫∑c BLACK)
 */
void drawTriangleBottomLeft(uint16_t color) {
  int x0 = 0;
  int y0 = SCREEN_HEIGHT - 1;
  oled.fillTriangle(x0, y0, x0 + 5, y0, x0, y0 - 5, color);
}

/**
 * üñåÔ∏è V·∫Ω hai tam gi√°c ·ªü g√≥c tr√™n v√† d∆∞·ªõi b√™n tr√°i
 * @param color M√†u tam gi√°c (WHITE ho·∫∑c BLACK)
 */
void drawLeftCornerTriangles(uint16_t color) {
  int x_left = 0;
  
  // üî∫ Tam gi√°c tr√™n tr√°i
  oled.fillTriangle(x_left, 0, x_left + 5, 0, x_left, 5, color);

  // üîª Tam gi√°c d∆∞·ªõi tr√°i
  int y_bottom = SCREEN_HEIGHT - 1;
  oled.fillTriangle(x_left, y_bottom, x_left + 5, y_bottom, x_left, y_bottom - 5, color);
}
/**
 * üì£ Ph√°t ti·∫øng c√≤i
 * @param numberBeep S·ªë l·∫ßn c√≤i k√™u
 */
void buzzerBeep(int numberBeep) {
  for (int i = 0; i < numberBeep; ++i) {
    digitalWrite(BUZZER, BUZZER_ON);
    delay(100);
    digitalWrite(BUZZER, BUZZER_OFF);
    delay(100);
  }
}